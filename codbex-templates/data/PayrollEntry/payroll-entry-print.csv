"DOCUMENTTEMPLATE_ID","DOCUMENTTEMPLATE_TYPE","DOCUMENTTEMPLATE_CONTENT"
"2","31","<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" ng-app="templateApp" ng-controller="templateController">

    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="icon" sizes="any" href="data:;base64,iVBORw0KGgo=">
        <title dg-view-title></title>
        <script type="text/javascript" src="/services/js/resources-core/services/loader.js?id=ide-view-js"></script>
        <link type="text/css" rel="stylesheet" href="/services/js/resources-core/services/loader.js?id=ide-view-css" />
        <theme></theme>
        </script>
        <style>
.right-row {
    text-align: right;
}
            .date-box {
                max-width: 800px;
                margin: auto;
                padding: 30px;
                border: 1px solid #eee;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
                font-size: 16px;
                line-height: 24px;
                font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
                color: #555;
            }

            .date-box table {
                width: 100%;
                line-height: inherit;
                text-align: left;
            }

            .date-box table td {
                padding: 5px;
                vertical-align: top;
            }

            .date-box table tr td:nth-child(2) {
                text-align: right;
            }

            .date-box table tr td:nth-child(3) {
                text-align: right;
            }

            .date-box table tr td:nth-child(4) {
                text-align: right;
            }

            .date-box table tr.top table td {
                padding-bottom: 20px;
            }

            .date-box table tr.top table td.title {
                font-size: 45px;
                line-height: 45px;
                color: #333;
            }

            .date-box table tr.information table td {
                padding-bottom: 10px;
            }

            .date-box table tr.heading td {
                background: #eee;
                border-bottom: 1px solid #ddd;
                font-weight: bold;
            }

            .date-box table tr.details td {
                padding-bottom: 20px;
            }

            .date-box table tr.item td {
                border-bottom: 1px solid #eee;
            }

            .date-box table tr.item.last td {
                border-bottom: none;
            }

            .date-box table tr.total td:nth-child(4) {
                border-top: 2px solid #eee;
                font-weight: bold;
            }

            table {
                margin-bottom: 1em;
            }

            .payslip-jumbo {
                text-align: center;
                font-size: 3em;
                margin-bottom: 1em;
                font-weight: bold;
                color: gray;
            }

            .issue-footer {
                text-align: center;
                font-weight: bold;
            }

            @media only screen and (max-width: 600px) {
                date-box table tr.top table td {
                    width: 100%;
                    display: block;
                    text-align: center;
                }

                .date-box table tr.information table td {
                    width: 100%;
                    display: block;
                    text-align: center;
                }
            }

            /** RTL **/
            .date-box.rtl {
                direction: rtl;
                font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
            }

            .date-box.rtl table {
                text-align: right;
            }

            .date-box.rtl table tr td:nth-child(2) {
                text-align: left;
            }

            date-box.rtl table tr td:nth-child(3) {
                text-align: left;
            }

            .date-box.rtl table tr td:nth-child(6) {
                text-align: left;
            }

        </style>
        <script>
            const app = angular.module('templateApp', ['ideUI', 'ideView']);
app.controller('templateController', ['$scope', '$http', 'ViewParameters', function ($scope, $http, ViewParameters) {
    const params = ViewParameters.get();

    const printPayslipUrl = "/services/ts/codbex-payrolls/print/PayrollEntry/api/PayrollEntryService.ts/" + params.id;

    $http.get(printPayslipUrl)
        .then(function (response) {
            console.log(response.data);
            $scope.PayrollEntry = response.data.payrollEntry;
            $scope.Date = new Date();
            $scope.Employee = response.data.employee;
            $scope.Department = response.data.department;
            $scope.JobRole = response.data.jobRole;
            $scope.Earnings = response.data.earnings;
            $scope.Salary = response.data.salary;
            $scope.Currency = response.data.currency;
            $scope.Amount = $scope.PayrollEntry.Amount;
            $scope.Deductions = response.data.deductions;
            $scope.EarningsTotal = response.data.earningsTotal;
            $scope.DeductionsTotal = response.data.deductionsTotal;
        });
}]);
        </script>
    </head>

    <body>
        <div class="date-box">
            <table cellpadding="0" cellspacing="0">
                <tr class="top">
                    <td colspan="2">
                        <table>
                            <tr>
                                <td>
<div class="right-row">
                                    Date: <b>{{Date | date: 'yyyy-MM-dd'}}</b>
</div>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>


            <div class="payslip-jumbo">Payslip</div>


            <table cellpadding="0" cellspacing="0">
                <tr class="information">
                    <td colspan="2">
                        <table>
                            <tr>
                                <td>
                                    Employee: <b>{{Employee.Name}}</b><br />
                                    Personal number: <b>{{Employee.PersonalNumber}}</b><br />
                                    Department: <b>{{Department.Name}}</b><br />
                                    Job role: <b>{{JobRole.Name}}</b> <br />
                                    Pay period: <b>{{PayrollEntry.StartDate | date: 'yyyy/MM/dd'}} -
                                        {{PayrollEntry.EndDate | date: 'yyyy/MM/dd'}}</b>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>

            <hr />
            <br />

            <div class="earnings-deductions">
                <table cellpadding="0" cellspacing="0">
                    <tr class="heading">
                        <td>Earnings</td>
                        <td>Amount</td>
                    </tr>
                    <tr>
                        <td>Base Salary</td>
                        <td>{{Salary.Gross}}</td>
                    </tr>

                    <tr ng-repeat="earning in Earnings">
                        <td>{{ earning.Name }}</td>
                        <td>{{ earning.Amount }} {{ Currency.Code }}</td>
                    </tr>

                    <tr>
                        <td></td>
                        <td><b>Total:</b> {{EarningsTotal}} {{ Currency.Code }}</td>
                    </tr>
                </table>

                <table cellpadding="0" cellspacing="0">
                    <tr class="heading">
                        <td>Deductions</td>
                        <td>Amount</td>
                    </tr>

                    <tr ng-repeat="deduction in Deductions">
                        <td>{{ deduction.Name }}</td>
                        <td>{{ deduction.Amount }} {{ Currency.Code }}</td>
                    </tr>

                    <tr>
                        <td></td>
                        <td><b>Total:</b> {{DeductionsTotal}} {{ Currency.Code }}</td>
                    </tr>
                </table>
            </div>

            <hr />
            <br />

            <div>
                <b>Net pay:</b> {{EarningsTotal - DeductionsTotal}} {{Currency.Code}}
            </div>

        </div>
    </body>

</html>

"